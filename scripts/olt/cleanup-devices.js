/* global fetch */
require('isomorphic-fetch');
const faker = require('faker');
const accessToken = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0.eyJqdGkiOiJlOGQxZjUzZi01Y2I5LTRhY2EtYTg3ZS0zNTY0ODZkOGNmMTQiLCJleHAiOjE1NDAxMjQ3MDUsIm5iZiI6MCwiaWF0IjoxNTM5MjYwNzE4LCJpc3MiOiJodHRwczovL2FwaS5kZXYub2x0ZC5kZS92MS9pZC9hdXRoL3JlYWxtcy9vbHQiLCJhdWQiOiJvbHQiLCJzdWIiOiJiMDE1NGZjZC1jNjk3LTRmZGQtYWY1Yi02MTBmM2JjZTZmYjciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJvbHQiLCJub25jZSI6IjhWcURUUGh6T0JZWnY4M1FhMm5OZkZLVUlSb1o5QTVucjhmTnBEZ3oiLCJhdXRoX3RpbWUiOjE1MzkyNjA3MTgsInNlc3Npb25fc3RhdGUiOiI4MWFiY2FjNC0xOGI1LTQzMWItOTc2OS01NDQ0NzdiMWE2MmEiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIG9sdC1leHRlcm5hbCBlbWFpbCBvZmZsaW5lX2FjY2VzcyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoidGVzdCB1c2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiLW9sdC1lMmUtdGVzdHMtaWQtZW5kcG9pbnRAbGlnaHRlbGxpZ2VuY2UuZGUiLCJnaXZlbl9uYW1lIjoidGVzdCIsImZhbWlseV9uYW1lIjoidXNlciIsImVtYWlsIjoiLW9sdC1lMmUtdGVzdHMtaWQtZW5kcG9pbnRAbGlnaHRlbGxpZ2VuY2UuZGUiLCJ0ZW5hbnQiOiJkZTczNmJmYy0zZDk5LTQwMzctODY3My03NTlmOGE0MDE1OWYifQ.tCtSuV2MSurmLo_eK0Rxekc4zmwgaUi9UDPotvXz1paLA0nGeFY0XsVbKaQzvI8h35DFUmubow3siyI6bVYAjCtelphipwvrcQFdcrEEiqCinNa7I8Oghzv5VkwOeMBCAYNxuiLu9H7ps9RTz08deOFQPsKPBtmzgJ1wapitUPddLy8mp5TpE1bukecXofXM1QlaZqSHP74K_Fn73EoU3qQo2Oy0p1CxPaaIvLKcWpVopMoNSAA27m0vbp-Ss91wvtuOGIV-d61ElkfpNqxqMyYxcZyHld4uTqPAiqLc7nNPiSBJygTIXKPTyi3nlEJI1TSUl1d3MmOAYlV-ByNViA"
const currentBuzz = faker.company.bsBuzz();
const domain = 'https://api.dev.oltd.de';
const sleep = time => new Promise(resolve => setTimeout(resolve, time));
function createDeviceType() {
    const body = JSON.stringify({
        "name": faker.commerce.productName(),
        "manufacturer": faker.company.companyName(),
        "model": "V1",
        "description": faker.company.bs(),
        "schema": {
            "configuration": {
                "hue": {
                    "type": "object",
                    "properties": {
                        "r": {"type": "number"},
                        "g": {"type": "number"},
                        "b": {"type": "number"}
                    }
                }
            },
            "attributes": {
                "brightness": {
                    "type": "number"
                },
            }
        }
    });
    return new Promise(async (resolve, reject) => {
        let res, resJson;
        try {
            res = await fetch(`${domain}/v1/device-types`, {
                body,
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    "Cache-Control": "no-cache",
                    "Content-Type": "application/json"
                },
                method: "POST"
            });
            resJson = await res.json();
        } catch (err) {
            reject(err)
        }
        resolve(resJson.data);
    });
}

function createDevice(deviceTypeId) {
    const body = JSON.stringify({
        "info": {
            "name": faker.commerce.productName(),
            "deviceTypeId": deviceTypeId,
            "description": faker.company.bs(),
            "tags": [
                "autoGenerated", "loadTest", currentBuzz
            ]
        },
        "configuration": {
            "hue": {
                "r": 255,
                "g": 0,
                "b": 0
            }
        }
    });
    return new Promise(async (resolve, reject) => {
        let res, resJson;
        try {
            res = await fetch(`${domain}/v1/devices`, {
                body,
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    "Cache-Control": "no-cache",
                    "Content-Type": "application/json"
                },
                method: "POST"
            });
            resJson = await res.json();
        } catch (err) {
            reject(err)
        }
        resolve(resJson.data);
    });
}

function sendState(deviceId) {
    const body = JSON.stringify({
        "senderId": deviceId,
        "deviceId": deviceId,
        "type": "attributes",
        "value":
            {
                "brightness": Math.floor(Math.random() * 300) + 120
            }

    });
    console.log(`Updating state for ${deviceId}`);
    return fetch(`${domain}/v1/data-ingest`, {
        body,
        headers: {
            Authorization: `Bearer ${accessToken}`,
            "Cache-Control": "no-cache",
            "Content-Type": "application/json"
        },
        method: "POST"
    });
}

function getDevices(numberOfDevices = 1000) {
    return new Promise(async (resolve, reject) => {
        let res, resJson;
        try {
            res = await fetch(`${domain}/v1/devices?pageSize=${numberOfDevices}`, {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    "Cache-Control": "no-cache",
                    "Content-Type": "application/json"
                }
            });
            resJson = await res.json();
        } catch (err) {
            reject(err)
        }
        resolve(resJson.data);
    });
}

function deleteDevice(deviceId) {
    return new Promise(async (resolve, reject) => {
        let res, resJson;
        try {
            res = await fetch(`${domain}/v1/devices/${deviceId}`, {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    "Cache-Control": "no-cache",
                    "Content-Type": "application/json"
                },
                method: "DELETE"
            });
            // resJson = await res.json();
        } catch (err) {
          console.error('deleteDevice', err);
            //reject(err)
        }
        if (res.status === 204) {
            resolve();
        } else {
            resolve()
        }
        console.log('Status=' + res.status);
    });
}

async function cleanup(totalDevicesDeleted = 0) {
    const devices = await getDevices(1000);
    console.log(devices.length);
    promises = devices.map(async device => {
        await deleteDevice(device.id);
    })
    try {
      await promises;
    } catch (e) {
      console.error(e);
    }
    
    totalDevicesDeleted += devices.length;
    // if(devices.length === 100){
    //     cleanup(totalDevicesDeleted)
    // }
}

async function start(nOfDeviceTypes = 10, nOfDevices = 10, nOfStateUpdates = 5) {
    console.log(`currentBuzz ${currentBuzz}`);
    console.time('deviceTypes');
    let deviceTypesPromises = Array.from(Array(nOfDeviceTypes).keys()).map(() => {
        return createDeviceType();
    });
    const deviceTypes = await Promise.all(deviceTypesPromises);
    console.timeEnd('deviceTypes');
    console.log(`created ${deviceTypes.length} deviceTypes`);

    console.time('devices');
    let devicePromises = [].concat(...deviceTypes.map((deviceType) => {
        return Array.from(Array(nOfDevices).keys()).map(() => {
            return createDevice(deviceType.id);
        });
    }));
    const devices = await Promise.all(devicePromises);
    console.timeEnd('devices');
    console.log(`created ${devices.length} devices`);

    // console.time('state');
    // const StatePromises = [].concat(...
    while (true) {
        await sendState(devices[Math.floor(Math.random()*devices.length)].id);
        // sleep(10);
    }
}


// start(5, 1);
cleanup();