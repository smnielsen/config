##########
## Kubernetes Commands
##########
kube-help() {
    echo '
    ### Login (Requires preset config for individual cloud)
# Azure:        "kube-az {registry}" will log you in to Azure and switch to registry.
# Google Cloud: "kube-gcp {project} {cluster} [zone:europe-west1-c]" will set current project and switch to cluster.

    ### Commands
# "kube-ns"     will let you set the current namespace. `kube-ns {namespace}`
# "kube-ctx"    will let you switch between the different context setups, `kube-ctx {context}`
# "kube-logs"   will print and follow logs for service in current namespace. `kube-logs {service}`
# "kube-pods"   will print pods in current namespace, or all if current ns is not set. `kube-pods [namespace]`
# "kube-svc"    will print services in current namespace, or all if current ns is not set. `kube-svc [namespace]`
# "kube-proxy"  starts a port-forwarding of service. `kube-proxy {service} [outport:7000] [inport:8080]`    
    '
}

### GCP: Setup Google Cloud K8s cluster
kube-gcp() {
    local project=$1
    local cluster=$2
    local zone=${3:-europe-west1-c}
    gcloud config set project ${project}; 
    gcloud container clusters get-credentials ${cluster} --zone ${zone}; 
}


### Azure: Login to Azure and set cluster
kube-az() {
    local registry=$1
    if [ -z $registry ]; then
        echo "# MISSING REGISTRY!"
        echo "=> Please define which azure registry to login to!"
        echo "$ kube-az myregistry"
        return
    fi
    az login
    echo "# Successfully logged in to Azure"
    echo "-> Connecting to ${registry}"
    az acr login -n $registry
}

kube-ns() {
    echo "# Global k8s namespace set to: ${1}"
    export KUBE_NAMESPACE=$1
}

kube-ctx () { 
    context=$1
    kubectl config use-context $context;
}

kube-logs() {
    local svc=$1
    local namespace=$(__kube-get-namespace $2)

    if [ -z $svc ] || [ -z $namespace ]; then
        echo "# Missing required params!"
        echo "$ kube-logs myservice mynamespace"
    else
        kubectl logs -f --namespace ${namespace} $(__kube-pod-name ${svc} ${namespace})
    fi
}

kube-pods () {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl -n $namespace get pods;
    else 
        kubectl get pods --all-namespaces
    fi
}
kube-svc() {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl get svc -n $namespace
    else 
        kubectl get svc --all-namespaces
    fi
}
kube-proxy() {
    local svc=$1
    local port=${2:-7000}
    local innerport=${3-8080}
    local namespace=${4-$KUBE_NAMESPACE}
    kubectl port-forward -n $namespace svc/$svc $port:$innerport
}

####################
## HELPERS
####################

__kube-pod-name() {
    local svc=$1
    local namespace=$2
    local podline=($(kubectl get pods -n ${namespace} | grep ${svc}))
    echo "${podline[1]}"
}

__kube-get-namespace() {
    local ns=${1-$KUBE_NAMESPACE}
    if [ -z $ns ]; then
        echo "# MISSING NAMESPACE!"
        echo "=> Set with helper"
        echo "$ kube-ns mynamespace"
    fi
    echo $ns
}
