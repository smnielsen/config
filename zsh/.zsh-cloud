##########
## Kubernetes Commands
##########
kube-help() {
    echo '
    ### Login (Requires preset config for individual cloud)
# Azure:        "kube-az {registry}" will log you in to Azure and switch to registry.
# Google Cloud: "kube-gcp {project} {cluster} [zone:europe-west1-c]" will set current project and switch to cluster.

    ### Commands
# "kube-ns"         will let you set the current namespace. `kube-ns {namespace}`
# "kube-ctx"        will let you switch between the different context setups, `kube-ctx {context}`
# "kube-logs"       will print and follow logs for service in current namespace. `kube-logs {service}`
# "kube-pods"       will print pods in current namespace, or all if current ns is not set. `kube-pods [namespace]`
# "kube-describe"   Will print information about POD. `kube-describe [POD]`
# "kube-svc"        will print services in current namespace, or all if current ns is not set. `kube-svc [namespace]`
# "kube-proxy"      starts a port-forwarding of service. `kube-proxy {service} [outport:7000] [inport:8080]`

    ### Osram
# "kube-proxy-kc"   starts a port-forwarding of keycloak. `kube-proxy-kc [short-env]`. eg. `kube-proxy-kc dev`
    '
}

### Default to current teams namespace
export KUBE_NAMESPACE=osramid

### GCP: Setup Google Cloud K8s cluster
kube-gcp() {
    local project=$1
    local cluster=$2
    local zone=${3:-europe-west1-c}
    gcloud config set project ${project};
    gcloud container clusters get-credentials ${cluster} --zone ${zone};
}


### Azure: Login to Azure and set cluster
kube-az() {
    local registry=$1
    if [ -z $registry ]; then
        echo "# MISSING REGISTRY!"
        echo "=> Please define which azure registry to login to!"
        echo "$ kube-az myregistry"
        return
    fi
    az login
    echo "# Successfully logged in to Azure"
    echo "-> Connecting to ${registry}"
    az acr login -n $registry
}

kube-ns() {
    if [ -z $1 ]; then
        echo "# K8S Current namespace: ${KUBE_NAMESPACE:-not set}"
    else
        echo "# Global K8S namespace set to: ${1}"
        export KUBE_NAMESPACE=$1
    fi
}

kube-ctx () {
    local context=$1
    if [ -z $context ]; then
        echo "# K8S Current Cluster: $(kubectl config current-context)"
        kubectx
    else
        kubectl config use-context $context;
    fi
}

kube-logs() {
    local svc=$1
    local container=${2}
    local namespace=${3-$KUBE_NAMESPACE}
    if [ ! -z $container ]; then
        container=-c${container}
    fi
    
    if [ -z $svc ] || [ -z $namespace ]; then
        echo "# Missing required params!"
        echo "# TIP: Set namespace: $ kube-ns {namespace}"
        echo "$ kube-logs {svc} [namespace]"
        echo ""
        echo "= Available namespaces ="
        kubectl get namespaces
    else
        kubectl logs -f -n ${namespace} ${container} $(__kube-pod-name ${svc} ${namespace})
    fi
}

kube-pods () {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl -n $namespace get pods;
    else
        kubectl get pods --all-namespaces
    fi
}

kube-describe() {
    local svc=$1
    local namespace=${2-$KUBE_NAMESPACE}
    
    if [ -z $svc ] || [ -z $namespace ]; then
        echo "# Missing required params!"
        echo "# TIP: Set namespace: $ kube-ns {namespace}"
        echo "$ kube-describe {pod} [namespace]"
        echo ""
        echo "= Available namespaces ="
        kubectl get namespaces
    else
        kubectl describe pods -n ${namespace} $(__kube-pod-name ${svc} ${namespace})
    fi
}

kube-svc() {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl get svc -n $namespace
    else
        kubectl get svc --all-namespaces
    fi
}

kube-exec() {
    local svc=$1
    local namespace=${2-$KUBE_NAMESPACE}
    
    if [ -z $svc ] || [ -z $namespace ]; then
        echo "# Missing required params!"
        echo "# TIP: Set namespace: $ kube-ns {namespace}"
        echo "$ kube-exec {svc} [namespace]"
        echo ""
        echo "= Available namespaces ="
        kubectl get namespaces
    else
        kubectl exec -n ${namespace} -it $(__kube-pod-name ${svc} ${namespace}) -- sh
        kubectl describe pods -n ${namespace} $(__kube-pod-name ${svc} ${namespace})
    fi
}
kube-proxy() {
    local svc=$1
    local port=${2:-7000}
    local innerport=${3-8080}
    local namespace=${4-$KUBE_NAMESPACE}
    if [ -z $namespace ]; then
        echo "# Namespace is not set."
        echo "$ kube-ns [NAMESPACE]"
        echo ""
        echo "= Available namespaces ="
        kubectl get namespaces
    else
        kubectl port-forward -n $namespace svc/$svc $port:$innerport
    fi
}

####################
## OSRAM Specifics
####################
## Will start a proxy to keycloak on env
kube-proxy-kc() {
    local env=$1
    kube-ns osramid
    kube-ctx olt-$env
    echo "# Running id-keycloak on http://localhost:7000/v1/id/auth/admin"
    kube-proxy id-keycloak-http 7000 80
}

## Will start a proxy to id-service on env
kube-proxy-id() {
    local env=$1
    kube-ns osramid
    kube-ctx olt-$env
    echo "# Running id-service on http://localhost:7001"
    kube-proxy id-service 7001 8080
}

## Will start a proxy to app-service on env
kube-proxy-app() {
    local env=$1
    kube-ns osramid
    kube-ctx olt-$env
    echo "# Running app-service on http://localhost:7001"
    kube-proxy app-service 7001 8080
}
####################
## HELPERS
####################

__kube-pod-name() {
    local svc=$1
    local namespace=$2
    local podline=($(kubectl get pods -n ${namespace} | grep ${svc}))
    echo "${podline[1]}"
}
