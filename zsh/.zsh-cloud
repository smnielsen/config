##########
## Google Cloud shortcuts
##########
# "gcpenv" will let you switch between the different GCP setups, `gcpenv leo-stage-italy`
# "gcplags" will setup a local port-forward for the chosen environment, `gcplags portal-dev52` will allow you to use `http://localhost:5011` in your `.env` files as a LAGS url
# "gcpcouch" works the same way as gcplags but for couchbase port 8091
# "gcpcouch2" works the same way as gcplags but for couchbase port 11210
# "gcpcouch-all" starts both 1 and 2 of gcpcouch
# "gcpproxy" is a generic function that lets you do `gcpproxy <env> <service> <port>` (e.g `gcpproxy portal-dev52 couchbase 8091`)
# "gcplogs" will fetch logs for your service. `gcplogs portal-devXX leo-api-gateway-service` will fetch the last 200 logs, you can specify the number of logs with the optional third parameter `gcplogs portal-devXX leo-api-gateway-service 10` will limit it to the last 10 logs


### GCP: Setup Google Cloud K8s cluster
# gcloud config set project $1; 
# gcloud container clusters get-credentials leo-frontend --zone europe-west1-c; 

### Azure: Login to Azure and set cluster 

kube-pod-name() {
    local svc=$1
    local namespace=$2
    local podline=($(kubectl get pods -n ${namespace} | grep ${svc}))
    echo "${podline[1]}"
}

kube-get-namespace() {
    local ns=${1-$KUBE_NAMESPACE}
    if [ -z $ns ]; then
        echo "# MISSING NAMESPACE!"
        echo "=> Set with helper"
        echo "$ kube-ns mynamespace"
    fi
    echo $ns
}

kube-az() {
    local registry=$1
    if [ -z $registry ]; then
        echo "# MISSING REGISTRY!"
        echo "=> Please define which azure registry to login to!"
        echo "$ kube-az myregistry"
        return
    fi
    az login
    echo "# Successfully logged in to Azure"
    echo "-> Connecting to ${registry}"
    az acr login -n $registry
}

kube-ns() {
    echo "# Global k8s namespace set to: ${1}"
    export KUBE_NAMESPACE=$1
}

kube-context () { 
    context=$1
    kubectl config use-context $context;
}

kube-logs() {
    local svc=$1
    local namespace=$(kube-get-namespace $2)

    if [ -z $svc ] || [ -z $namespace ]; then
        echo "# Missing required params!"
        echo "$ kube-logs myservice mynamespace"
    else
        kubectl logs -f --namespace ${namespace} $(kube-pod-name ${svc} ${namespace})
    fi
}

kube-pods () {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl -n $namespace get pods;
    else 
        kubectl get pods --all-namespaces
    fi
}
kube-svc() {
    local namespace=${1-$KUBE_NAMESPACE}
    if [ ! -z $namespace ]; then
        kubectl get svc -n $namespace
    else 
        kubectl get svc --all-namespaces
    fi
}
kube-proxy() {
    local svc=$1
    local port=${2:-8080}
    local innerport=${3-8080}
    local namespace=${4-$KUBE_NAMESPACE}
    kubectl port-forward -n $namespace svc/$svc $port:$innerport
}
